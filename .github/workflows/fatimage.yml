
name: Build fat image
'on':
  workflow_dispatch:
    inputs:
      use_RL8:
        required: true
        description: Include RL8 image build
        type: boolean
        default: false
concurrency:
  group: ${{ github.ref }}-{{ matrix.os_version }} # to branch/PR + OS
  cancel-in-progress: true
jobs:
  openstack:
    name: openstack-imagebuild
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        os_version: [RL8, RL9]
        rl8_selected:
          - ${{ inputs.use_RL8 == true }} # only potentially true for workflow_dispatch
        exclude:
          - os_version: RL8
            rl8_selected: false
    env:
      ANSIBLE_FORCE_COLOR: True
      OS_CLOUD: openstack
      CI_CLOUD: ${{ vars.CI_CLOUD }}
    steps:
      - uses: actions/checkout@v2

      - name: Setup ssh
        run: |
          set -x
          mkdir ~/.ssh
          echo "${{ secrets[format('{0}_SSH_KEY', vars.CI_CLOUD)] }}" > ~/.ssh/id_rsa
          chmod 0600 ~/.ssh/id_rsa
        shell: bash

      - name: Add bastion's ssh key to known_hosts
        run: cat environments/.stackhpc/bastion_fingerprints >> ~/.ssh/known_hosts
        shell: bash
      
      - name: Install ansible etc
        run: dev/setup-env.sh
      
      - name: Write clouds.yaml
        run: |
          mkdir -p ~/.config/openstack/
          echo "${{ secrets[format('{0}_CLOUDS_YAML', vars.CI_CLOUD)] }}" > ~/.config/openstack/clouds.yaml
        shell: bash

      - name: Setup environment
        run: |
          . venv/bin/activate
          . environments/.stackhpc/activate
        
      - name: Build fat image with packer
        id: packer_build
        run: |
          . venv/bin/activate
          . environments/.stackhpc/activate
          cd packer/
          packer init .
          PACKER_LOG=1 packer build -on-error=${{ vars.PACKER_ON_ERROR }} -except=openstack.openhpc-extra -var-file=$PKR_VAR_environment_root/${{ vars.CI_CLOUD }}.pkrvars.hcl openstack.pkr.hcl
        env:
          PKR_VAR_os_version: ${{ matrix.os_version }}

      - name: Get created image names from manifest
        id: manifest
        run: |
          . venv/bin/activate
          for IMAGE_ID in $(jq --raw-output '.builds[].artifact_id' packer/packer-manifest.json)
          do
            while ! openstack image show -f value -c name $IMAGE_ID; do
              sleep 5
            done
            IMAGE_NAME=$(openstack image show -f value -c name $IMAGE_ID)
            echo "image-name=${IMAGE_NAME}" >> "$GITHUB_OUTPUT"
            echo "image-id=$IMAGE_ID" >> "$GITHUB_OUTPUT"
          done

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: install libguestfs
        run: sudo apt-get -y install libguestfs-tools

      - name: mkdir for mount
        run: sudo mkdir -p './${{ steps.manifest.outputs.image-name }}'

      - name: mount qcow2 file
        run: sudo guestmount -a ${{ steps.manifest.outputs.image-name }}.qcow2 -i --ro -o allow_other './${{ steps.manifest.outputs.image-name }}'


      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.17.0
        with:
          scan-type: fs
          scan-ref: "./${{ steps.manifest.outputs.image-name }}"
          scanners: "vuln"
          format: sarif
          output: "${{ steps.manifest.outputs.image-name }}.sarif"
          # turn off secret scanning to speed things up

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "${{ steps.manifest.outputs.image-name }}.sarif"
          category: "${{ matrix.os_version }}"

      - name: Fail if scan has CRITICAL vulnerabilities
        uses: aquasecurity/trivy-action@0.16.1
        with:
          scan-type: fs
          scan-ref: "./${{ steps.manifest.outputs.image-name }}"
          scanners: "vuln"
          format: table
          exit-code: '1'
          severity: 'CRITICAL'
          ignore-unfixed: true
