name: Build nightly image
on:
  workflow_dispatch:
      inputs:
        ci_cloud:
          description: 'Select the CI_CLOUD'
          required: true
          type: choice
          options:
            - LEAFCLOUD
            - SMS
            - ARCUS
  schedule:
    - cron: '0 0 * * *'  # Run at midnight

jobs:
  upload:
    name: upload-nightly-targets
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}-${{ matrix.os_version }}-${{ matrix.image }}-${{ matrix.target_cloud }}
      cancel-in-progress: true
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        target_cloud:
          - LEAFCLOUD
          - SMS
          - ARCUS
        os_version:
          - RL8
          - RL9
        image:
          - rocky-latest
          - rocky-latest-cuda
        exclude:
          - os_version: RL8
            image: rocky-latest-cuda
          - target_cloud: LEAFCLOUD
    env:
      OS_CLOUD: openstack
      SOURCE_CLOUD: ${{ github.event.inputs.ci_cloud || vars.CI_CLOUD }}
      TARGET_CLOUD: ${{ matrix.target_cloud }}
      IMAGE_NAME: "${{ matrix.image }}-${{ matrix.os_version }}"
    steps:
      - uses: actions/checkout@v2

      - name: Record settings for CI cloud
        run: |
          echo SOURCE_CLOUD: ${{ env.SOURCE_CLOUD }}
          echo TARGET_CLOUD: ${{ env.TARGET_CLOUD }}

      - name: Install openstackclient
        run: |
          python3 -m venv venv
          . venv/bin/activate
          pip install -U pip
          pip install $(grep -o 'python-openstackclient[><=0-9\.]*' requirements.txt)
        shell: bash

      - name: Write clouds.yaml
        run: |
          mkdir -p ~/.config/openstack/
          echo "${{ secrets[format('{0}_CLOUDS_YAML', env.SOURCE_CLOUD)] }}" > ~/.config/openstack/source_clouds.yaml
          echo "${{ secrets[format('{0}_CLOUDS_YAML', env.TARGET_CLOUD)] }}" > ~/.config/openstack/target_clouds.yaml
        shell: bash

      - name: Download source image
        run: |
          . venv/bin/activate
          export OS_CLIENT_CONFIG_FILE=~/.config/openstack/source_clouds.yaml
          openstack image save --file ${{ env.IMAGE_NAME }} ${{ env.IMAGE_NAME }}
        shell: bash

      - name: Upload to target cloud
        run: |
          . venv/bin/activate
          export OS_CLIENT_CONFIG_FILE=~/.config/openstack/target_clouds.yaml

          openstack image create "${{ env.IMAGE_NAME }}" \
            --file "${{ env.IMAGE_NAME }}" \
            --disk-format qcow2 \
        shell: bash

      - name: Delete old latest image from target cloud
        run: |
          . venv/bin/activate
          export OS_CLIENT_CONFIG_FILE=~/.config/openstack/target_clouds.yaml

          IMAGE_COUNT=$(openstack image list --name ${{ env.IMAGE_NAME }} -f value -c ID | wc -l)
          if [ "$IMAGE_COUNT" -gt 1 ]; then
            OLD_IMAGE_ID=$(openstack image list --sort created_at:asc --name "${{ env.IMAGE_NAME }}"  -f value -c ID | head -n 1)
            openstack image delete "$OLD_IMAGE_ID"
          else
            echo "Only one image exists, skipping deletion."
          fi
        shell: bash
