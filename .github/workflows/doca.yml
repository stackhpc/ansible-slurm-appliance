name: Test DOCA extra build
on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - '**'
      - '!dev/**'
      - 'dev/setup-env.sh'
      - '!docs/**'
      - '!README.md'
      - '!.gitignore'
      - '!.github/workflows/'
      - '.github/workflows/doca'
  pull_request:
    paths:
      - '**'
      - '!dev/**'
      - 'dev/setup-env.sh'
      - '!docs/**'
      - '!README.md'
      - '!.gitignore'
      - '!.github/workflows/'
      - '.github/workflows/doca'

jobs:
  openstack:
    name: openstack-docabuild
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}-${{ matrix.build.label }} # to branch/PR + OS
      cancel-in-progress: true
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false # allow other matrix jobs to continue even if one fails
      matrix: # build RL8, RL9
        build:
          - image_name: openhpc-doca-RL8
            source_image_name: openhpc-RL8 # TODO: needs to be injected from environments/.stackhpc/terraform/cluster_image.auto.tfvars.json
            inventory_groups: doca
          - image_name: openhpc-doca-RL9
            source_image_name: openhpc-RL9 # TODO: as above
            inventory_groups: doca
    env:
      ANSIBLE_FORCE_COLOR: True
      OS_CLOUD: openstack
      CI_CLOUD: ${{ vars.CI_CLOUD }} # default from repo settings
      ARK_PASSWORD: ${{ secrets.ARK_PASSWORD }}

    steps:
      - uses: actions/checkout@v2

      - name: Record settings for CI cloud
        run: |
          echo CI_CLOUD: ${{ env.CI_CLOUD }}

      - name: Setup ssh
        run: |
          set -x
          mkdir ~/.ssh
          echo "${{ secrets[format('{0}_SSH_KEY', env.CI_CLOUD)] }}" > ~/.ssh/id_rsa
          chmod 0600 ~/.ssh/id_rsa
        shell: bash

      - name: Add bastion's ssh key to known_hosts
        run: cat environments/.stackhpc/bastion_fingerprints >> ~/.ssh/known_hosts
        shell: bash

      - name: Install ansible etc
        run: dev/setup-env.sh

      - name: Write clouds.yaml
        run: |
          mkdir -p ~/.config/openstack/
          echo "${{ secrets[format('{0}_CLOUDS_YAML', env.CI_CLOUD)] }}" > ~/.config/openstack/clouds.yaml
        shell: bash

      - name: Setup environment
        run: |
          . venv/bin/activate
          . environments/.stackhpc/activate

      - name: Build fat image with packer
        id: packer_build
        run: |
          set -x
          . venv/bin/activate
          . environments/.stackhpc/activate
          cd packer/
          packer init .
          
          PACKER_LOG=1 packer build \
          -on-error=${{ vars.PACKER_ON_ERROR }} \
          -var-file=$PKR_VAR_environment_root/${{ env.CI_CLOUD }}.pkrvars.hcl \
          -var "source_image_name=${{ matrix.build.source_image_name }}" \
          -var "image_name=${{ matrix.build.image_name }}" \
          -var "inventory_groups=${{ matrix.build.inventory_groups }}" \
          openstack.pkr.hcl
        
      - name: Get created image names from manifest
        id: manifest
        run: |
          . venv/bin/activate
          IMAGE_ID=$(jq --raw-output '.builds[-1].artifact_id' packer/packer-manifest.json)
          while ! openstack image show -f value -c name $IMAGE_ID; do
            sleep 5
          done
          IMAGE_NAME=$(openstack image show -f value -c name $IMAGE_ID)
          echo $IMAGE_ID > image-id.txt
          echo $IMAGE_NAME > image-name.txt

      - name: Upload manifest artifact
        uses: actions/upload-artifact@v4
        with:
          name: image-details-${{ matrix.build.label }}
          path: |
            ./image-id.txt
            ./image-name.txt
          overwrite: true
