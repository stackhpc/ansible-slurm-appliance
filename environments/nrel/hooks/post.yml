---
- name: "Set/fix the the ephemeral ssd mounts"
  hosts: compute
  tags: vs-set-ephemeral-mounts
  become: true
  tasks:
    - name: Set ephemeral mounts
      ansible.builtin.include_role:
        name: vs-set-ephemeral-mounts

- name: Do pam_mkhomedir_plus
  hosts: login
  become: true
  tags:
    - pam_mkhomedir_plus
  tasks:
    - name: Do role for IDM
      ansible.builtin.include_role:
        name: vshpc.prov.pam_mkhomedir_plus

- name: Do cuda
  hosts: all
  become: true
  tags:
    - cudafy
  tasks:
    - name: Install nvidia libs
      ansible.builtin.include_role:
        name: vshpc.prov.pam_mkhomedir_plus

    - name: Install cuda repo
      ansible.builtin.get_url:
        dest: "/etc/yum.repos.d/cuda-{{ cuda_distro }}.repo"
        url: "{{ cuda_repo }}"

    - name: Check if nvidia driver module is enabled
      ansible.builtin.shell:
        cmd: dnf module list --enabled nvidia-driver
      changed_when: false
      failed_when: false
      register: _cuda_driver_module_enabled

    - name: Enable nvidia driver module
      ansible.builtin.command: "dnf module enable -y nvidia-driver:open-dkms"
      register: _cuda_driver_module_enable
      when: "'No matching Modules to list' in _cuda_driver_module_enabled.stderr"
      changed_when: "'Nothing to do' not in _cuda_driver_module_enable.stdout"

    - name: Install nvidia drivers
      ansible.builtin.command: dnf module install -y nvidia-driver
      register: _cuda_driver_install
      when: "'No matching Modules to list' in _cuda_driver_module_enabled.stderr"
      changed_when: "'Nothing to do' not in _cuda_driver_install.stdout"



# - name: Do cp user home to /var/lib/USER
#   hosts: all
#   # tags: pre_tasks_all
#   become: true
#   gather_facts: false
#   tasks:
    # - name: Does home/USER dir exist
    #   ansible.builtin.stat:
    #     path: "/var/lib/{{ appliances_local_users_ansible_user_name }}/.ssh"
    #   register: homerocky

    # - name: Does /var/lib/rocky dir exist
    #   ansible.builtin.stat:
    #     path: "/var/lib/{{ appliances_local_users_ansible_user_name }}"
    #   register: varlibrocky

    # - name: Move copy home dir
    #   ansible.builtin.command: cp -a /home/{{ appliances_local_users_ansible_user_name }} /var/lib/{{ appliances_local_users_ansible_user_name }}
    #   when: not homerocky.stat.exists
    #   register: cpa_output # <- Registers the command output.
    #   changed_when: cpa_output.rc != 0 # <- Uses the return code to define when the task has changed.

- name: Clean post_final_cleanup
  hosts: all
  become: true
  tags:
    - post_final_cleanup
  tasks:
    - name: Do a thing to clean
      ansible.builtin.command: dnf clean all
      become: true
      register: dnfcl_output # <- Registers the command output.
      changed_when: dnfcl_output.rc != 0 # <- Uses the return code to define when the task has changed.

# - name: sync_slurm_allocations install on admin node
#   hosts: admin
#   become: true
#   tags:
#     - sync_slurm_allocations_admin
#   vars:
#     sync_slurm_allocations_clustername: "{{ cluster_slurm_name }}"
#   tasks:
#     - include_role:
#         name: sync_slurm_allocations

# - name: cluster_dataset_manager create project directories
#   hosts: admin
#   become: true
#   tags:
#     - cluster_dataset_manager
#   vars:
#     cluster_dataset_manager_name: "{{ cluster_slurm_name }}"
#   tasks:
#     - include_role:
#         name: cluster_dataset_manager

# - name: slurm_lex_accounting
#   hosts: control
#   become: true
#   tags:
#     - slurm_lex_accounting
#   tasks:
#     - include_role:
#         name: slurm_lex_accounting
#   vars:
#     slurm_lex_accounting_dev: False
#     slurm_lex_accounting_clustername: "{{ cluster_slurm_name }}"

# - name: vstack_admin_config
#   hosts: control,login
#   become: true
#   tags:
#     - vstack_admin_config
#   tasks:
#     - include_role:
#         name: vstack_admin_config

# - name: add kernel modules to compute and login nodes
#   hosts: login,compute
#   become: true
#   tags:
#     - post_powertools
#     - post_kernel_headers
#   tasks:
#     - yum:
#         enablerepo: powertools
#         state: present
#         name: "{{ packages }}"
#       vars:
#         packages:
#           - kernel-devel

# - name: IPA and LDAP san fix
#   hosts: all
#   become: true
#   tags:
#     - ipa_ldap_fix
#   tasks:
#     - include_role:
#         name: ansible_ipa_ldap_fix

# - name: "Nvidia A100 video driver install"
#   hosts:
#     - compute_gpu0
#     - compute_gpu3
#   become: true
#   tags:
#     - vs_nvidia_a100_driver_install
#   tasks:
#     - include_role:
#         name: vs_nvidia_a100_driver_install

# https://github.nrel.gov/hpc/vs_nvidia_a100_driver_install.git

# - name: register_aco_idm
#   hosts: control,login:
#   become: true
#   tags:
#     - vstack_idm_config
#     - aco_idm
#   tasks:
#     - include_role:
#         name: vstack_common_config

# - name: "ansible_sshd_baseline"
#   hosts: all:!no_sshd_update
#   become: yes
#   roles:
#     - ansible_sshd_baseline

# - name: hspd12 provision
#   hosts: control,login
#   tags:
#     - hspd12
#     - aco_idm
#   tasks:
#     - include_role:
#         name: hspd12
