---

# See: https://github.com/stackhpc/ansible-role-cluster-nfs
# for variable definitions

nfs_server_default: "{{ groups['control'] | first }}" # avoid using hostvars for compute-init

# create a space-separated list of nfs group IPs:
_nfs_node_ips: "{{ groups['nfs'] | map('extract', hostvars, 'ansible_host') | join(' ') }}"

# default *all* entries in nfs_configurations to only permitting mounts from above IPs:
nfs_export_clients: "{{ _nfs_node_ips }}"

nfs_configuration_home_volume: # volume-backed home directories
  - comment: Export /exports/home from Slurm control node as /home
    nfs_enable:
        server:  "{{ inventory_hostname in groups['control'] }}"
        # Don't mount share on control node:
        clients: "{{ inventory_hostname in groups['cluster'] and inventory_hostname not in groups['control'] }}"
    nfs_server: "{{ nfs_server_default }}"
    nfs_export: "/exports/home" # assumes default site TF is being used
    nfs_client_mnt_point: "/home"
    # prevent tunnelling and setuid binaries:
    # NB: this is stackhpc.nfs role defaults but are set here to prevent being
    # accidently overriden via default options
    nfs_export_options: 'rw,secure,root_squash'

nfs_configuration_compute_nodes: # cluster configuration for compute_init/slurm-controlled rebuild
  - comment: Export /exports/cluster from Slurm control node
    nfs_enable:
        server: "{{ inventory_hostname in groups['control'] }}"
        clients: false
    nfs_export: "/exports/cluster"

nfs_configurations_extra: [] # site-specific nfs shares

nfs_configurations: >- # construct stackhpc.nfs variable
  {{
    (nfs_configuration_home_volume if (cluster_home_volume | default(true)) else [])
    +
    nfs_configuration_compute_nodes
    +
    nfs_configurations_extra
  }}
