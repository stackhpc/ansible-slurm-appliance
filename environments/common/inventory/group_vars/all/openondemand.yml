---

# See: ansible/roles/openondemand/README.md
# for variable definitions.

# NB: Variables prefixed ood_ are all from https://github.com/OSC/ood-ansible

ondemand_package_version: "4.0.7" # used in ansible/cleanup.yml
ondemand_package: ondemand-"{{ ondemand_package_version }}" # osc.ood role var controlling installed package

openondemand_servername: "{{ hostvars[groups['openondemand'].0].ansible_host if groups['openondemand'] else '' }}"

openondemand_auth: basic_pam

openondemand_jupyter_partition: "{{ openhpc_partitions[0]['name'] }}"
openondemand_desktop_partition: "{{ openhpc_partitions[0]['name'] }}"
openondemand_rstudio_partition: "{{ openhpc_partitions[0]['name'] }}"
openondemand_matlab_partition: '' # Requires target site to already have MATLAB so set to empty
openondemand_codeserver_partition: "{{ openhpc_partitions[0]['name'] }}"

# Regex defining hosts which openondemand can proxy; the default regex is compute nodes (for apps) and grafana host,
# e.g. if the group `compute` has hosts `compute-{0,1,2,..}` this will be '(compute-\d+)|(control)'.
# The autogenerated regex may need overriding if compute node names do not contain numbers in a consistent position
# or include regex special characters.
openondemand_host_regex: "{{ (groups['compute'] + groups['grafana']) | to_ood_regex }}"

# Add grafana to dashboard links to OOD only if grafana group is available
openondemand_dashboard_links_grafana:
  - name: Grafana
    app_name: grafana
    category: Monitoring
    description: Dashboards
    url: "{{ grafana_url_openondemand_proxy }}"
openondemand_dashboard_links: "{{ openondemand_dashboard_links_grafana if groups['grafana'] | length > 0 }}"

openondemand_login_host: localhost

openondemand_clusters:
  slurm:
    v2:
      metadata:
        title: "{{ openhpc_cluster_name }}" # interpolation here works as openondemand is lexically after openhpc
      login:
        host: "{{ openondemand_login_host }}"
        default: true
      job:
        adapter: slurm
        cluster: "{{ openhpc_cluster_name }}"
      batch_connect:
        basic:
          script_wrapper: |
            module purge
            %s
          set_host: host=$(hostname -s)
        vnc:
          script_wrapper: |
            module purge

            export PATH=/opt/TurboVNC/bin:$PATH
            # avoid "Failed to create secure directory (/run/user/*/pulse)"
            export XDG_RUNTIME_DIR="$TMPDIR/xdg_runtime"

            # Workaround to avoid "Unable to contact settings server" when
            # lauching xfce4-session
            xfce4-session() { /bin/dbus-launch /bin/xfce4-session $@ ; }
            export -f xfce4-session
            %s
          set_host: host=$(hostname -s)
      custom: "{{ openondemand_clusters_grafana if groups['grafana'] | length > 0 else {} }}"

openondemand_clusters_grafana:
  # embed grafana panels in Jobs app: https://osc.github.io/ood-documentation/latest/customization.html#grafana-support
  grafana:
    host: "{{ grafana_url }}"
    orgId: 1
    dashboard:
      name: "node-exporter-slurm"
      uid: "node-exporter-slurm"
      panels:
        cpu: 77
        memory: 78
    labels:
      cluster: "cluster"
      host: "host"
      jobid: "jobid"

# define installation of openondemand apps (see openondemand_apps_* below for configuration):
openondemand_install_app_jupyter:
  jupyter:
    repo: https://github.com/OSC/bc_example_jupyter.git
    version: master                # defaults (optional)
openondemand_install_app_rstudio:  # mapping, values as for ansible.builtin.git: repo (required)/dest/version(default main)/umask
  rstudio:
    repo: https://github.com/stackhpc/ood-stackhpc-rstudio.git
    version: 2025.08.1
openondemand_install_app_matlab:
  matlab:
    repo: https://github.com/stackhpc/ood-stackhpc-matlab.git
    version: 2025.08.1
openondemand_install_app_codeserver:
  codeserver:
    repo: https://github.com/stackhpc/bc_osc_codeserver.git
    version: 2025.09.1
# osc:ood role var (NB only active when not in configure):
ood_install_apps: >-
  {{
    {}
    | combine(openondemand_install_app_jupyter if openondemand_jupyter_partition else {})
    | combine(openondemand_install_app_rstudio if openondemand_rstudio_partition else {})
    | combine(openondemand_install_app_matlab if openondemand_matlab_partition else {})
    | combine(openondemand_install_app_codeserver if openondemand_codeserver_partition else {})
  }}

# https://github.com/OSC/ondemand/tree/master/apps/bc_desktop
# also https://osc.github.io/ood-documentation/latest/enable-desktops/custom-job-submission.html#enable-desktops-custom-job-submission
openondemand_apps_desktop_default:
  title: Remote Desktop
  description: Request a desktop to run GUI applications.
  cluster: slurm
  form:
    - desktop
    - bc_queue
    - bc_num_hours
    - num_cores
    - gres
    - gres_count
    - node
  attributes:
    desktop: xfce
    bc_queue:
      value: "{{ openondemand_desktop_partition | default(none) }}"
    num_cores:
      label: Number of cores
      value: 1
    gres:
      label: Resources
      help: Select GPU or other Slurm GRES resources
      required: true
      widget: select
      options: "{{ openondemand_gres_options }}"
    gres_count:
      label: Resource count
      help: Count of GPU or other resources
      required: false
      widget: number_field
      value: 1
      min: 1
      step: 1
    node:
      label: Node name
      help: Select a particular node or leave empty to let Slurm pick the next available
      value: ""
  submit: |
    ---
    script:
      job_name: "ood-desktop"
      native:
        - <%= "--nodes=1" %>
        - <%= "--ntasks=#{num_cores}" %>
        - <%= "--nodelist=#{node}" %>
        <% if gres != 'none' %>
        - <%= "--gres=#{gres}:#{gres_count}" %>
        <% end %>
openondemand_apps_desktop: "{{ {'bc_desktop':openondemand_apps_desktop_default} if openondemand_desktop_partition | default(none) else {} }}"

# yamllint disable-line rule:line-length
# See https://osc.github.io/ood-documentation/latest/app-development/tutorials-interactive-apps/add-jupyter.html#app-development-tutorials-interactive-apps-add-jupyter
openondemand_apps_jupyter_default:
  title: Jupyter Notebook
  description: Request a Jupyter Notebook server
  cluster: slurm
  form:
    - modules
    - extra_jupyter_args
    - bc_queue
    - bc_num_hours
    - num_cores
    - gres
    - gres_count
    - node
  attributes: # TODO
    num_cores:
      label: Number of cores
      value: 1
    modules: ""
    gres:
      label: Resources
      help: Select GPU or other Slurm GRES resources
      required: true
      widget: select
      options: "{{ openondemand_gres_options }}"
    gres_count:
      label: Resource count
      help: Count of GPU or other resources
      required: false
      widget: number_field
      value: 1
      min: 1
      step: 1
    node:
      label: Node name
      help: Select a particular node or leave empty to let Slurm pick the next available
      value: ""
    extra_jupyter_args: ""
    bc_queue:
      value: "{{ openondemand_jupyter_partition | default(none) }}"
    node: ""
  submit: |
    ---
    batch_connect:
      template: "basic"
      script_wrapper: |
        module purge
        export PATH=/opt/jupyter-py39/bin/:$PATH
        %s
    script:
      job_name: "ood-jupyter"
      native:
        - <%= "--nodes=1" %>
        - <%= "--ntasks=#{num_cores}" %>
        - <%= "--nodelist=#{node}" %>
        <% if gres != 'none' %>
        - <%= "--gres=#{gres}:#{gres_count}" %>
        <% end %>
openondemand_apps_jupyter: "{{ {'jupyter':openondemand_apps_jupyter_default} if openondemand_jupyter_partition | default(none) else {} }}"

openondemand_apps_rstudio_default:
  title: RStudio
  description: Request a RStudio server
  cluster: slurm
  attributes:
    bc_queue:
      value: "{{ openondemand_rstudio_partition | default(none) }}"
    rstudio_module:
      label: RStudio module
      required: true
      cachable: true
      help: Choose your RStudio module
      widget: select
      options:
        - ["RStudio v{{ openondemand_rstudio_version }}", "rstudio-server/{{ openondemand_rstudio_version }}"]
    extra_modules_script:
      label: Extra modules script
      help: If you'd like to load additional modules alongside RStudio-Server, put the 'module load ...' commands into a text file (one 'module load...' per line) and specify its path here # noqa: yaml[line-length]
      widget: text_field
      required: false
    cores:
      label: Number of CPU cores
      help: How many CPU cores to reserve for your session. NB Ensure this is within the maximum allowed by your chosen partition.
      widget: number_field
      min: 1
      max: 48
      step: 1
      value: 1
      cachable: true
    ram:
      widget: number_field
      label: RAM in GB
      help: How much RAM to reserve for your session. NB Ensure this is within the maximum allowed by your chosen partition
      min: 4
      max: 700
      step: 1
      value: 4
      cachable: true
    bc_num_hours:
      widget: number_field
      help: Maximum runtime in hours for your session. NB Ensure this is within the maximum allowed by your chosen partition
      min: 1
      max: 240
      step: 1
      value: 30
      cachable: true
    bc_email_on_started: false
    auto_modules_RStudio-Server:
      default: false
    gres:
      label: Resources
      help: Select GPU or other Slurm GRES resources
      required: true
      widget: select
      options: "{{ openondemand_gres_options }}"
    gres_count:
      label: Resource count
      help: Count of GPU or other resources
      required: false
      widget: number_field
      value: 1
      min: 1
      step: 1
  form:
    - bc_queue
    - rstudio_module
    - auto_queues
    - extra_modules_script
    - cores
    - ram
    - bc_num_hours
    - bc_email_on_started
    - gres
    - gres_count
  submit: |
    ---
    batch_connect:
      template: "basic"
      conn_params:
        - csrf_token
        - rstudio_module
    script:
      native:
        - "--partition"
        - "<%= bc_queue %>"
        - "--ntasks"
        - "1"
        - "--mem"
        - "<%= ram.blank? ? 4 : ram.to_i %>G"
        - "--cpus-per-task"
        - "<%= cores.blank? ? 1 : cores.to_i %>"<% if auto_queues.start_with?("gpu") %>
        - "--gpus-per-task"
        - "1"<% end %>
        <% if gres != 'none' %>
        - <%= "--gres=#{gres}:#{gres_count}" %>
        <% end %>
openondemand_apps_rstudio: "{{ {'rstudio':openondemand_apps_rstudio_default} if openondemand_rstudio_partition | default(none) else {} }}"

openondemand_apps_matlab_default:
  title: MATLAB
  description: Request a desktop to run MATLAB.
  cluster: slurm
  form:
    - desktop
    - bc_queue
    - bc_num_hours
    - matlab_module
    - cores
    - ram
    - gres
    - gres_count
  attributes:
    desktop: xfce
    # bc_account: # i.e. slurm account
    #   value: root
    bc_queue:
      value: "{{ openondemand_matlab_partition | default(none) }}"
    matlab_module:
      label: MATLAB module
      required: true
      cachable: true
      help: Choose your MATLAB module
      widget: select
      options:
        - ["MATLAB v{{ openondemand_matlab_version }}", "matlab/{{ openondemand_matlab_version }}"]
    cores:
      label: Number of CPU cores
      help: How many CPU cores to reserve for your session. NB Ensure this is within the maximum allowed by your chosen partition.
      widget: number_field
      min: 1
      max: 48
      step: 1
      value: 1
      cachable: true
    ram:
      widget: number_field
      label: RAM in GB
      help: How much RAM to reserve for your session. NB Ensure this is within the maximum allowed by your chosen partition
      min: 4
      max: 700
      step: 1
      value: 4
      cachable: true
    bc_num_hours:
      widget: number_field
      help: Maximum runtime in hours for your session. NB Ensure this is within the maximum allowed by your chosen partition
      min: 1
      max: 240
      step: 1
      value: 30
      cachable: true
    gres:
      label: Resources
      help: Select GPU or other Slurm GRES resources
      required: true
      widget: select
      options: "{{ openondemand_gres_options }}"
    gres_count:
      label: Resource count
      help: Count of GPU or other resources
      required: false
      widget: number_field
      value: 1
      min: 1
      step: 1
  submit: |
    ---
    script:
      job_name: "ood-matlab"
      native:
        - "--partition"
        - "<%= bc_queue %>"
        - "--ntasks"
        - "1"
        - "--mem"
        - "<%= ram.blank? ? 4 : ram.to_i %>G"
        - "--cpus-per-task"
        - "<%= cores.blank? ? 1 : cores.to_i %>"
        <% if gres != 'none' %>
        - <%= "--gres=#{gres}:#{gres_count}" %>
        <% end %>
openondemand_apps_matlab: "{{ {'matlab':openondemand_apps_matlab_default} if openondemand_matlab_partition | default(none) else {} }}"

openondemand_apps_codeserver_default:
  title: Code Server
  description: Request a Code Server
  cluster: slurm
  form:
    - bc_queue
    - bc_num_hours
    - codeserver_module
    - cores
    - ram
  attributes:
    codeserver_module:
      label: Code Server module
      required: true
      cachable: true
      help: Choose your Code Server module
      widget: select
      options:
        - ["Code Server v{{ openondemand_code_server_version}}", "code-server/{{ openondemand_code_server_version }}"]
    bc_queue:
      value: "{{ openondemand_codeserver_partition | default(none) }}"
    cores:
      label: Number of CPU cores
      help: How many CPU cores to reserve for your session. NB Ensure this is within the maximum allowed by your chosen partition.
      widget: number_field
      min: 1
      max: 48
      step: 1
      value: 1
      cachable: true
    ram:
      widget: number_field
      label: RAM in GB
      help: How much RAM to reserve for your session. NB Ensure this is within the maximum allowed by your chosen partition
      min: 4
      max: 700
      step: 1
      value: 4
      cachable: true
    bc_num_hours:
      widget: number_field
      help: Maximum runtime in hours for your session. NB Ensure this is within the maximum allowed by your chosen partition
      min: 1
      max: 240
      step: 1
      value: 30
  submit: |
    ---
    batch_connect:
      template: "basic"
      conn_params:
        - codeserver_module
    script:
      job_name: "ood-codeserver"
      native:
        - "--partition"
        - "<%= bc_queue %>"
        - "--ntasks"
        - "1"
        - "--mem"
        - "<%= ram.blank? ? 4 : ram.to_i %>G"
        - "--cpus-per-task"
        - "<%= cores.blank? ? 1 : cores.to_i %>"
openondemand_apps_codeserver: "{{ {'codeserver':openondemand_apps_codeserver_default} if openondemand_codeserver_partition | default(none) else {} }}"

# osc.ood:ood_apps - see https://github.com/OSC/ood-ansible#ood_apps
openondemand_dashboard_support_url: ""
openondemand_dashboard_docs_url: ""
openondemand_apps:
  files:
    env:
      ood_shell: ""
  shell:
    env:
      ood_shell_origin_check: "https://{{ openondemand_servername }}"
  dashboard:
    env:
      motd_path: /etc/motd
      motd_format: markdown
      ood_dashboard_support_url: "{{ openondemand_dashboard_support_url }}"
      ood_dashboard_docs_url: "{{ openondemand_dashboard_docs_url }}"
      ood_brand_bg_color: "#0e6ec8"
      ood_dashboard_title: "{{ openhpc_cluster_name }}"

ood_apps: >-
  {{
    openondemand_apps
    | combine(openondemand_apps_jupyter)
    | combine(openondemand_apps_desktop)
    | combine(openondemand_apps_rstudio)
    | combine(openondemand_apps_matlab)
    | combine(openondemand_apps_codeserver)
  }}

# Prometheus config for Open Ondemand exporter
# https://osc.github.io/ood-documentation/latest/monitoring/prometheus.html#prometheus-configuration
openondemand_scrape_configs:
  - job_name: ondemand
    metrics_path: /metrics
    scrape_timeout: 20s
    scrape_interval: 2m
    static_configs:
      - targets:
          - "{{ openondemand_address }}:9301"
        labels:
          environment: "{{ appliances_environment_name }}"
          service: "openondemand"

openondemand_dashboard:
  - dashboard_id: 13465
    replacements:
      - placeholder: DS_PROMETHEUS
        replacement: prometheus
    revision_id: 1

_opeonondemand_unset_auth: "    RequestHeader unset Authorization"

# Fix grafana proxying for basic auth if anonymous grafana access enabled:
# yamllint disable-line rule:line-length
openondemand_node_proxy_directives: "{{ _opeonondemand_unset_auth if (openondemand_auth == 'basic_pam' and 'openondemand_host_regex' and groups['grafana'] | length > 0 and hostvars[ groups['grafana']  | first]._grafana_auth_is_anonymous) else '' }}"
# Reason: OOD server forwards headers to proxied servers, so when if using basic auth
# Grafana gets passed the Open Ondemand user.
# This probably isn't a Grafana user so it throws an auth error.
# If anonymous access is enabled we can work around this by not forwarding auth header.
