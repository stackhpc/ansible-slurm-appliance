---

# See: ansible/roles/openondemand/README.md 
# for variable definitions.

# NB: Variables prefixed ood_ are all from https://github.com/OSC/ood-ansible

# openondemand_servername: '' # Must be defined when using openondemand

# Regex defining hosts which openondemand can proxy; the default regex is compute nodes (for apps) and grafana host,
# e.g. if the group `compute` has hosts `compute-{0,1,2,..}` this will be '(compute-\d+)|(control)'.
# The autogenerated regex may need overriding if compute node names do not contain numbers in a consistent position 
# or include regex special characters.
openondemand_host_regex: "{{ (groups['compute'] + groups['grafana']) | to_ood_regex }}"

# Add grafana to dashboard links to OOD only if grafana group is available
openondemand_dashboard_links_grafana:
  - name: Grafana
    app_name: grafana
    category: Monitoring
    description: Dashboards
    url: "{{ grafana_url_openondemand_proxy }}"
openondemand_dashboard_links: "{{ openondemand_dashboard_links_grafana if groups['grafana'] | length > 0 }}"

openondemand_login_host: localhost

openondemand_clusters:
  slurm:
    v2:
      metadata:
        title: "{{ openhpc_cluster_name }}" # interpolation here works as openondemand is lexically after openhpc
      login:
        host: "{{ openondemand_login_host }}"
        default: true
      job:
        adapter: slurm
        cluster: "{{ openhpc_cluster_name }}"
      batch_connect:
        basic:
          script_wrapper: |
            module purge
            export PATH=/opt/jupyter-py39/bin/:$PATH
            %s
          set_host: host=$(hostname -s)
        vnc:
          script_wrapper: |
            module purge

            export PATH=/opt/TurboVNC/bin:$PATH
            # avoid "Failed to create secure directory (/run/user/*/pulse)"
            export XDG_RUNTIME_DIR="$TMPDIR/xdg_runtime"

            # Workaround to avoid "Unable to contact settings server" when
            # lauching xfce4-session
            xfce4-session() { /bin/dbus-launch /bin/xfce4-session $@ ; }
            export -f xfce4-session
            %s
          set_host: host=$(hostname -s)
      custom: "{{ openondemand_clusters_grafana if groups['grafana'] | length > 0 else {} }}"

openondemand_clusters_grafana:
  # embed grafana panels in Jobs app: https://osc.github.io/ood-documentation/latest/customization.html#grafana-support
  grafana:
    host: "{{ grafana_url }}"
    orgId: 1
    dashboard:
      name: "node-exporter-slurm"
      uid: "node-exporter-slurm"
      panels:
        cpu: 77
        memory: 78
    labels:
      cluster: "cluster"
      host: "host"
      jobid: "jobid"

ood_install_apps_defaults:
  jupyter:
    repo: https://github.com/OSC/bc_example_jupyter.git
    version: master                # defaults (optional)
ood_install_apps: "{{ ood_install_apps_defaults if openondemand_jupyter_partition | default(none) else {} }}"

# https://github.com/OSC/ondemand/tree/master/apps/bc_desktop
# also https://osc.github.io/ood-documentation/latest/enable-desktops/custom-job-submission.html#enable-desktops-custom-job-submission
openondemand_apps_desktop_default:
  title: Remote Desktop
  description: Request a desktop to run GUI applications.
  cluster: slurm
  form:
    - desktop
    - bc_queue
    - bc_num_hours
    - num_cores
    - node
  attributes:
    desktop: xfce
    # bc_account: # i.e. slurm account
    #   value: root
    bc_queue:
      value: "{{ openondemand_desktop_partition | default(none) }}"
    num_cores:
      label: Number of cores
      value: 1
    node:
      label: Node name
      help: Select a particular node or leave empty to let Slurm pick the next available
      value: ""
  submit: |
    ---
    script:
      job_name: "ood-desktop"
      native:
        - <%= "--nodes=1" %>
        - <%= "--ntasks=#{num_cores}" %>
        - <%= "--nodelist=#{node}" %>
openondemand_apps_desktop: "{{ {'bc_desktop':openondemand_apps_desktop_default} if openondemand_desktop_partition | default(none) else {} }}"

# See https://osc.github.io/ood-documentation/latest/app-development/tutorials-interactive-apps/add-jupyter.html#app-development-tutorials-interactive-apps-add-jupyter
openondemand_apps_jupyter_default:
  title: Jupyter Notebook
  description: Request a Jupyter Notebook server
  cluster: slurm
  form:
    - modules
    - extra_jupyter_args
    - bc_queue
    - bc_num_hours
    - num_cores
    - node
  attributes: # TODO
    num_cores:
      label: Number of cores FOO
      value: 1
    modules: ""
    extra_jupyter_args: ""
    bc_queue:
      value: "{{ openondemand_jupyter_partition | default(none) }}"
    node: ""
  submit: |
    ---
    batch_connect:
      template: "basic"
    script:
      job_name: "ood-jupyter"
      native:
        - <%= "--nodes=1" %>
        - <%= "--ntasks=#{num_cores}" %>
        - <%= "--nodelist=#{node}" %>
openondemand_apps_jupyter: "{{ {'jupyter':openondemand_apps_jupyter_default} if openondemand_jupyter_partition | default(none) else {} }}"

# osc.ood:ood_apps - see https://github.com/OSC/ood-ansible#ood_apps
openondemand_dashboard_support_url: ''
openondemand_dashboard_docs_url: ''
openondemand_apps:
  files:
    env:
      ood_shell: ""
  shell:
    env:
      ood_shell_origin_check: "https://{{ openondemand_servername }}"
  dashboard:
    env:
      motd_path: /etc/motd
      motd_format: markdown
      ood_dashboard_support_url: "{{ openondemand_dashboard_support_url }}"
      ood_dashboard_docs_url: "{{ openondemand_dashboard_docs_url }}"
      ood_brand_bg_color: "#0e6ec8"
      ood_dashboard_title: "{{ openhpc_cluster_name }}"

ood_apps: "{{ openondemand_apps | combine(openondemand_apps_jupyter) | combine(openondemand_apps_desktop) }}"

# Prometheus config for Open Ondemand exporter
# https://osc.github.io/ood-documentation/latest/monitoring/prometheus.html#prometheus-configuration
openondemand_scrape_configs:
  - job_name: ondemand
    metrics_path: /metrics
    scrape_timeout: 20s
    scrape_interval: 2m
    static_configs:
    - targets:
      - "{{ openondemand_address }}:9301"
      labels:
        environment: "{{ appliances_environment_name }}"
        service: "openondemand"

openondemand_dashboard:
  - dashboard_id: 13465
    replacements:
      - placeholder: DS_PROMETHEUS
        replacement: prometheus
    revision_id: 1

_opeonondemand_unset_auth: '    RequestHeader unset Authorization'

# Fix grafana proxying for basic auth if anonymous grafana access enabled:
openondemand_node_proxy_directives: "{{ _opeonondemand_unset_auth if (openondemand_auth == 'basic_pam' and 'openondemand_host_regex' and groups['grafana'] | length > 0 and hostvars[ groups['grafana']  | first]._grafana_auth_is_anonymous) else '' }}"
# Reason: OOD server forwards headers to proxied servers, so when if using basic auth Grafana gets passed the Open Ondemand user. This probably isn't a Grafana user so it throws an auth error. If anonymous access is enabled we can work around this by not forwarding auth header.
