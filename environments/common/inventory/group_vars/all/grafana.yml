grafana_port: 30001

# Configure external address, with external URL depending on whether we are using Open Ondemand as a proxy
grafana_api_address: "{{ hostvars[groups['prometheus'].0].internal_address }}"
grafana_api_url: "http://{{ grafana_api_address }}:{{ grafana_port }}"
grafana_url_direct: "http://{{ grafana_address }}:{{ grafana_port }}"
grafana_url_openondemand_proxy: "https://{{ openondemand_servername | default('') }}/node/{{ groups['prometheus'].0 }}/{{ grafana_port }}"
grafana_url: "{{ grafana_url_openondemand_proxy if groups['openondemand'] | count > 0 else grafana_url_direct }}"
grafana_serve_from_sub_path: "{{ groups['openondemand'] | count > 0 }}"
grafana_domain: "{{ ( openondemand_servername | default('') ) if groups['openondemand'] | count > 0 else grafana_api_address }}"

grafana_dashboards_default:
  # node exporter slurm:
  - dashboard_file: node-exporter-slurm.json
    replacements:
      - placeholder: DS_PROMETHEUS
        replacement: prometheus
      - placeholder: DS_ELASTICSEARCH
        replacement: slurmstats
    revision_id: 1
  # openhpc slurm:
  - dashboard_file: openhpc-slurm.json
    replacements:
      - placeholder: DS_PROMETHEUS
        replacement: prometheus
      - placeholder: DS_SLURMSTATS
        replacement: slurmstats
  # slurm jobs overview
  - dashboard_file: slurm-jobs.json
    replacements:
      - placeholder: DS_PROMETHEUS
        replacement: prometheus
      - placeholder: DS_SLURMSTATS
        replacement: slurmstats
  # slurm exporter
  - dashboard_id: 4323
    replacements:
      - placeholder: DS_PROMETHEUS
        replacement: prometheus
    revision_id: 3
  # blackbox probes
  - dashboard_id: 14928
    replacements:
      - placeholder: DS_PROMETHEUS
        replacement: prometheus
    revision_id: 6
grafana_dashboards: "{{ grafana_dashboards_default + (openondemand_dashboard if groups.get('openondemand') else []) }}"

# Configmap names of kube prometheus stack's default dashboards to exclude
grafana_exclude_default_dashboards:
- kube-prometheus-stack-nodes-darwin
- kube-prometheus-stack-grafana-overview
- kube-prometheus-stack-proxy
- kube-prometheus-stack-etcd
- kube-prometheus-stack-alertmanager-overview
- kube-prometheus-stack-scheduler

grafana_security:
    admin_user: grafana
    admin_password: "{{ vault_grafana_admin_password }}"
    allow_embedding: true

grafana_datasources:
  - name: slurmstats
    # see https://github.com/grafana/opensearch-datasource#configure-the-data-source-with-provisioning
    type: grafana-opensearch-datasource
    url: "https://{{ opensearch_ip }}:9200"
    basicAuth: true
    basicAuthUser: admin
    secureJsonData:
      basicAuthPassword: "{{ vault_elasticsearch_admin_password }}"
    withCredentials: true
    jsonData:
      tlsSkipVerify: true
      database: filebeat-*
      timeField: "@timestamp"
      # Have to set flavor and version, but ansible/roles/opensearch/templates/opensearch.yml.j2 fakes version for filebeat
      # so need to set to fake version here:
      version: '7.10.2'
      flavor: elasticsearch
    editable: true
    # readOnly: false
grafana_plugins:
  - grafana-opensearch-datasource 2.8.1

grafana_auth_anonymous: false # Enable anonymous View-only login - see implications: https://grafana.com/docs/grafana/latest/administration/security/#implications-of-enabling-anonymous-access-to-dashboards
_grafana_auth_anon_cfg:
  anonymous:
    org_name: "Main Org."
    org_role: Viewer
grafana_auth: "{{ _grafana_auth_anon_cfg if grafana_auth_anonymous | bool else {} }}"
_grafana_auth_is_anonymous: "{{ grafana_auth.anonymous | default({}) | length > 0 }}"
