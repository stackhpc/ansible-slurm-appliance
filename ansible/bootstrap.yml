---

- hosts: localhost
  gather_facts: false
  become: false
  tags:
    - deprecated
  tasks:
    - fail:
        msg: |
          Variables prefixed secrets_openhpc_* are deprecated - run:
              $ ansible-playbook ansible/adhoc/generate-passwords.yml
          to update these variable names. ** NB: The actual secrets will not be changed.**
      when: "'secrets_openhpc_' in (hostvars[inventory_hostname] | join)"

- hosts: resolv_conf
  become: yes
  gather_facts: false
  tags: resolv_conf
  tasks:
    - import_role:
        name: resolv_conf

- hosts: etc_hosts
  gather_facts: false
  tags: etc_hosts
  become: yes
  tasks:
    - import_role:
        name: etc_hosts

- hosts: proxy
  gather_facts: false
  tags: proxy
  become: yes
  tasks:
    - import_role:
        name: proxy

- hosts: cluster
  gather_facts: false
  become: yes
  tasks:
    - name: Prevent ssh hanging if shared home is unavailable
      lineinfile:
        path: /etc/profile
        search_string: HOSTNAME=$(/usr/bin/hostnamectl --transient 2>/dev/null) || \
        state: absent
    - name: Remove RHEL cockpit
      dnf:
        name: cockpit-ws
        state: "{{ appliances_cockpit_state }}"
    - name: Add system user groups
      ansible.builtin.group: "{{ item.group }}"
      loop: "{{ appliances_local_users }}"
      when:
        - item.enable | default(true) | bool
        - "'group' in item"
      become_method: "sudo"
      # Need to change working directory otherwise we try to switch back to non-existent directory.
      become_flags: '-i'
    - name: Add system users
      ansible.builtin.user: "{{ item.user }}"
      loop: "{{ appliances_local_users }}"
      when: item.enable | default(true) | bool
      become_method: "sudo"
      # Need to change working directory otherwise we try to switch back to non-existent directory.
      become_flags: '-i'
    - name: Reset ssh connection to allow user changes to affect ansible_user
      meta: reset_connection
      become: no

- hosts: systemd
  become: yes
  gather_facts: false
  tags: systemd
  tasks:
    - name: Make systemd unit modifications
      import_role:
        name: systemd

- hosts: selinux
  gather_facts: false
  become: yes
  tags:
    - selinux
  tasks:
    - name: Set SELinux state and policy
      ansible.posix.selinux:
        state: "{{ selinux_state }}"
        policy: "{{ selinux_policy }}"
      register: sestatus

- hosts: freeipa_server
  # Done here as it might be providing DNS
  tags:
    - freeipa
    - freeipa_server
  gather_facts: yes
  become: yes
  tasks:
    - name: Install FreeIPA server
      import_role:
        name: freeipa
        tasks_from: server.yml

# --- tasks after here require access to package repos ---

- hosts: firewalld
  gather_facts: false
  become: yes
  tags: firewalld
  tasks:
    - import_role:
        name: firewalld

- hosts: fail2ban
  gather_facts: false
  become: yes
  tags: fail2ban
  tasks:
    - import_role:
        name: fail2ban

- name: Setup podman
  gather_facts: false
  hosts: podman
  tags: podman
  tasks:
    - import_role:
        name: podman
        tasks_from: prereqs.yml
      tags: prereqs

    - import_role:
        name: podman
        tasks_from: config.yml
      tags: config

- hosts: update
  gather_facts: false
  become: yes
  tags:
    - update
  tasks:
    - block:
      - name: Update selected packages
        yum:
          name: "{{ update_name }}"
          state: "{{ update_state }}"
          exclude: "{{ update_exclude }}"
          disablerepo: "{{ update_disablerepo }}"
        async: "{{ 30 * 60 }}" # wait for up to 30 minutes
        poll: 15 # check every 15 seconds
        register: updates
      - name: Ensure update log directory on localhost exists
        file:
          path: "{{ update_log_path | dirname }}"
          state: directory
        become: false
        delegate_to: localhost
        run_once: true
      - name: Log updated packages
        copy:
          content: "{{ updates.results | join('\n') }}"
          dest: "{{ update_log_path }}"
        delegate_to: localhost
        become: no
      - debug:
          msg: "{{ updates.results | length }} changes to packages - see {{ update_log_path }} for details"
      when: "update_enable | default('false') | bool"

- hosts:
    - selinux
    - update
  gather_facts: false
  become: yes
  tags:
    - reboot
    - selinux
    - update
  tasks:
    - name: Check for pending reboot from package updates
      stat: 
        path: /var/run/reboot-required
      register: update_reboot_required
    - debug:
        msg: "setstatus:{{ (sestatus.reboot_required | default(false)) }} packages: {{ (update_reboot_required.stat.exists | bool) }}"
    - name: Reboot if required from SELinux state change or package upgrades
      reboot:
        post_reboot_delay: 30
      when: (sestatus['reboot_required'] | default(false)) or (update_reboot_required.stat.exists | bool)
    - name: Wait for hosts to be reachable
      wait_for_connection:
        sleep: 15
    - name: update facts
      setup:
      when: (sestatus.changed | default(false)) or (sestatus.reboot_required | default(false))

- hosts: ofed
  gather_facts: no
  become: yes
  tags: ofed
  tasks:
    - include_role:
        name: ofed
