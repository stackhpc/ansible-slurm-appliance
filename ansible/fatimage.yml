---
# Builder version of site.yml just installing binaries

- hosts: builder
  become: false
  gather_facts: false
  tasks:
    - name: Report hostname (= final image name)
      ansible.builtin.command: hostname # noqa: no-changed-when
    - name: Report inventory groups
      ansible.builtin.debug:
        var: group_names

- name: Run pre.yml hook
  vars:
    appliances_environment_root: "{{ lookup('env', 'APPLIANCES_ENVIRONMENT_ROOT') }}"
    hook_path: "{{ appliances_environment_root }}/hooks/pre.yml"
  import_playbook: "{{ hook_path if hook_path | exists else 'noop.yml' }}"
  when: hook_path | exists

- name: Sync pulp repos with upstream
  hosts: pulp
  tasks:
    - ansible.builtin.include_role:
        name: pulp_site
        tasks_from: sync.yml
        apply:
          delegate_to: localhost
      when: appliances_mode != 'configure'

- import_playbook: bootstrap.yml

- hosts: doca
  become: true
  gather_facts: true
  tasks:
    - name: Install NVIDIA DOCA
      ansible.builtin.import_role:
        name: doca

- name: Run post-bootstrap.yml hook
  vars:
    appliances_environment_root: "{{ lookup('env', 'APPLIANCES_ENVIRONMENT_ROOT') }}"
    hook_path: "{{ appliances_environment_root }}/hooks/post-bootstrap.yml"
  import_playbook: "{{ hook_path if hook_path | exists else 'noop.yml' }}"
  when: hook_path | exists

- hosts: builder
  become: true
  gather_facts: true
  tasks:
    # - import_playbook: iam.yml
    - name: Install FreeIPA client
      ansible.builtin.import_role:
        name: freeipa
        tasks_from: client-install.yml
      when: "'freeipa_client' in group_names"
    - name: Install sssd
      ansible.builtin.import_role:
        name: sssd
        tasks_from: install.yml
      when: "'sssd' in group_names"

    # - import_playbook: filesystems.yml:
    - name: Install nfs packages
      ansible.builtin.dnf:
        name: nfs-utils
      when: "'nfs' in group_names"
    - name: Install Manila client packages
      ansible.builtin.include_role:
        name: stackhpc.os-manila-mount
        tasks_from: install.yml
      when: "'manila' in group_names"
    - name: Install Lustre packages
      ansible.builtin.include_role:
        name: lustre
        tasks_from: install.yml
      when: "'lustre' in group_names"

- import_playbook: extras.yml

# TODO: is this the right place?
- name: Install compute_init playbook
  hosts: compute_init
  tags: compute_init # tagged to allow running on cluster instances for dev
  become: true
  tasks:
    - ansible.builtin.include_role:
        name: compute_init
        tasks_from: install.yml

- name: Install gateway playbook
  hosts: gateway
  tags: gateway
  become: true
  gather_facts: false
  tasks:
    - ansible.builtin.include_role:
        name: gateway

- hosts: builder
  become: true
  gather_facts: true
  tasks:
    # - import_playbook: slurm.yml:
    - name: Setup DB
      ansible.builtin.include_role:
        name: mysql
        tasks_from: install.yml
      when: "'mysql' in group_names"

    - name: Install rebuild
      ansible.builtin.include_role:
        name: rebuild
        tasks_from: install.yml

    - name: Install OpenHPC
      ansible.builtin.import_role:
        name: stackhpc.openhpc
        tasks_from: install.yml
      when: "'openhpc' in group_names"

    # - import_playbook: portal.yml
    - name: Open Ondemand server (packages)
      ansible.builtin.include_role:
        name: osc.ood
        tasks_from: install-package.yml
        vars_from: "Rocky/{{ ansible_distribution_major_version }}.yml"
      when: "'openondemand' in group_names"
    # # FUTURE: install-apps.yml - this is git clones

    - name: Open Ondemand server (apps)
      ansible.builtin.include_role:
        name: osc.ood
        tasks_from: install-apps.yml
        vars_from: "Rocky/{{ ansible_distribution_major_version }}.yml"
      when: "'openondemand' in group_names"

    - name: Open Ondemand remote desktop
      ansible.builtin.import_role:
        name: openondemand
        tasks_from: vnc_compute.yml
      when: "'openondemand_desktop' in group_names"

    - name: Open Ondemand jupyter node
      ansible.builtin.import_role:
        name: openondemand
        tasks_from: jupyter_compute.yml
      when: "'openondemand_jupyter' in group_names"

    - name: Install Apache PAM module # Extracted from start of roles/openondemand/tasks/pam_auth.yml to ensure only installed during build
      ansible.builtin.dnf:
        name: mod_authnz_pam

    # - import_playbook: monitoring.yml:
    - ansible.builtin.import_role:
        name: opensearch
        tasks_from: install.yml
      when: "'opensearch' in group_names"

    - ansible.builtin.import_role:
        name: slurm_stats
        tasks_from: install.yml
      when: "'slurm_stats' in group_names"

    - ansible.builtin.import_role:
        name: filebeat
        tasks_from: install.yml
      when: "'filebeat' in group_names"

    - ansible.builtin.import_role:
        # can't only run cloudalchemy.node_exporter/tasks/install.yml as needs vars from preflight.yml and triggers service start
        # however starting node exporter is ok
        name: cloudalchemy.node_exporter
      when: "'node_exporter' in group_names"

    - name: Openondemand exporter
      ansible.builtin.dnf:
        name: ondemand_exporter
      when: "'openondemand' in group_names"

    - name: Slurm exporter
      ansible.builtin.include_role:
        name: slurm_exporter
        tasks_from: install.yml
      when: "'slurm_exporter' in group_names"

    - name: Install alertmanager
      ansible.builtin.include_role:
        name: alertmanager
        tasks_from: install.yml
      when: "'alertmanager' in group_names"

- hosts: prometheus
  become: true
  gather_facts: true
  tasks:
    - ansible.builtin.import_role:
        name: cloudalchemy.prometheus
        tasks_from: preflight.yml

    # can't run cloudalchemy.prometheus/tasks/install.yml as it triggers a unit start
    # so below is a partial extraction of this:
    - name: Create prometheus system group
      ansible.builtin.group:
        name: prometheus
        system: true
        state: present

    - name: Create prometheus system user
      ansible.builtin.user:
        name: prometheus
        system: true
        shell: "/usr/sbin/nologin"
        group: prometheus
        createhome: false
        home: "{{ prometheus_db_dir }}"

    - name: Download prometheus binary to local folder
      become: false
      ansible.builtin.get_url:
        # yamllint disable-line rule:line-length
        url: "https://github.com/prometheus/prometheus/releases/download/v{{ prometheus_version }}/prometheus-{{ prometheus_version }}.linux-{{ go_arch }}.tar.gz"
        dest: "/tmp/prometheus-{{ prometheus_version }}.linux-{{ go_arch }}.tar.gz"
        checksum: "sha256:{{ __prometheus_checksum }}"
        mode: "0644"
      register: _download_archive
      until: _download_archive is succeeded
      retries: 5
      delay: 2

    - name: Unpack prometheus binaries
      become: false
      ansible.builtin.unarchive:
        remote_src: true
        src: "/tmp/prometheus-{{ prometheus_version }}.linux-{{ go_arch }}.tar.gz"
        dest: "/tmp"
        creates: "/tmp/prometheus-{{ prometheus_version }}.linux-{{ go_arch }}/prometheus"

    - name: Propagate official prometheus and promtool binaries
      ansible.builtin.copy:
        remote_src: true
        src: "/tmp/prometheus-{{ prometheus_version }}.linux-{{ go_arch }}/{{ item }}"
        dest: "{{ _prometheus_binary_install_dir }}/{{ item }}"
        mode: "0755"
        owner: root
        group: root
      with_items:
        - prometheus
        - promtool

- hosts: grafana
  become: true
  gather_facts: true
  tasks:
    - name: Include distribution variables for cloudalchemy.grafana
      ansible.builtin.include_vars: "{{ appliances_repository_root }}/ansible/roles/cloudalchemy.grafana/vars/redhat.yml"
    - ansible.builtin.import_role:
        name: cloudalchemy.grafana
        tasks_from: install.yml
    - ansible.builtin.import_role:
        name: cloudalchemy.grafana
        tasks_from: plugins.yml
    - ansible.builtin.include_role: # done in same play so it can use handlers from cloudalchemy.grafana
        name: grafana-dashboards

- name: Add support for NVIDIA GPU auto detection to Slurm
  hosts: cuda
  become: true
  tasks:
    - name: Recompile slurm
      ansible.builtin.import_role:
        name: slurm_recompile
      vars:
        slurm_recompile_with_nvml: "{{ groups.cuda | length > 0 }}"

- name: Run post.yml hook
  vars:
    appliances_environment_root: "{{ lookup('env', 'APPLIANCES_ENVIRONMENT_ROOT') }}"
    hook_path: "{{ appliances_environment_root }}/hooks/post.yml"
  import_playbook: "{{ hook_path if hook_path | exists else 'noop.yml' }}"
  when: hook_path | exists

- import_playbook: final.yml

- hosts: builder
  become: true
  gather_facts: true
  tags: finalise
  tasks:
    - name: Cleanup image
      ansible.builtin.import_tasks: cleanup.yml
    - name: Shutdown Packer VM
      community.general.shutdown:
