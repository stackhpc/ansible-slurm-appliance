---
# Fail early if configuration is invalid

- name: Validate secrets created
  hosts: localhost
  gather_facts: false
  tags:
    - validate
    - passwords
  tasks:
    - ansible.builtin.import_role:
        name: passwords
        tasks_from: validate.yml

- name: Validate Ansible Galaxy installs are up to date
  hosts: localhost
  gather_facts: false
  become: false
  tags:
    - validate
    - galaxy
  tasks:
      # Can't use e.g. ansible-galaxy {role,collection} list to check installed
      # vs desired, as git-installed collections do not provide any metadata for
      # the actual installed version.
      # So this compares requirements.yml against a .last version produced by a
      # successful dev/setup-env.sh run.
    - ansible.builtin.assert:
        that: "{{ _requirements_current == _requirements_installed }}"
        fail_msg: |
          Ansible Galaxy installs are out of date:

          {% for req in _requirements_installed | difference(_requirements_current) %}
          {{ req }}
          {% endfor %}

          _requirements_current:
          .{{ _requirements_current }}.
          _requirements_installed:
          .{{ _requirements_installed }}.

          Run dev/setup-env.sh to fix this.
      vars:
        # note difference filter requires lists, so need to rearrange yaml from files.
        _requirements_path: "{{ appliances_repository_root }}/requirements.yml"
        _requirements_current: "{{ (lookup('file', _requirements_path) | from_yaml).values() | flatten }}"
        # below produced by dev/setup-env.sh - gives empty list if file is missing:
        _requirements_installed: "{{ ((lookup('file', _requirements_path + '.last', errors='ignore') or '{}') | from_yaml ).values() | flatten }}"

- name: Validate OpenTofu templated inventory is appropriate
  # This "documents" the assumptions that Ansible makes about the
  # OpenTofu-provided inventory
  hosts: localhost
  gather_facts: false
  tags:
    - validate
    - opentofu
  tasks:
    - name: Check templated groups
      ansible.builtin.assert:
        that:
          - item in groups
          - groups[item] | length > 0
        fail_msg: >
          Expected inventory group '{{ item }}' is missing or empty:
          - Check OpenTofu inventory template is up to date
          - Check OpenTofu configuration defines 'login' and 'compute' variables properly
      loop:
        - control
        - compute
        - login
    - name: Check templated 'all' vars
      ansible.builtin.assert:
        that:
          - openhpc_cluster_name is defined
          - cluster_domain_suffix is defined
          - cluster_home_volume is defined
          - cluster_compute_groups is defined
        fail_msg: "One or more expected variables are missing: is OpenTofu inventory template up to date?"

- name: Ensure control node is in inventory
  hosts: all
  gather_facts: false
  tags:
    - validate
    - openhpc
  tasks:
    - ansible.builtin.assert:
        that: groups['control'] | length
        fail_msg: "no hosts found in group 'control' - has control node been deployed?"

- name: Validate openhpc configuration
  hosts: openhpc
  gather_facts: false
  tags:
    - validate
    - openhpc
  tasks:
    - ansible.builtin.import_role:
        name: stackhpc.openhpc
        tasks_from: validate.yml

- name: Validate filebeat configuration
  hosts: filebeat
  gather_facts: false
  tags:
    - validate
    - filebeat
  tasks:
    - ansible.builtin.import_role:
        name: filebeat
        tasks_from: validate.yml
      tags: validate

- name: Validate openondemand configuration
  hosts:
    - openondemand
    - grafana
  gather_facts: false
  tags:
    - validate
    - openondemand
    - openondemand_server
    - grafana
  tasks:
    - ansible.builtin.import_role:
        name: openondemand
        tasks_from: validate.yml
      # This set of tasks will run if there are grafana hosts configured.
      # It is a valid configuration to have a grafana group with hosts
      # when *not* deploying openondemand. This would mean that openondemand
      # vars validated in the below task are not set in a way that passes
      # this set of validation tasks. To ensure that this validation does
      # not fail with a valid config, only run these tasks when the
      # openondemand group both exists *and* contains hosts.
      when:
        - "'openondemand' in groups"
        - groups['openondemand'] | length > 0
      tags:
        - openondemand
        - openondemand_server
        - grafana

- name: Validate freeipa configuration
  hosts: freeipa
  tags:
    - validate
    - freeipa
  tasks:
    - ansible.builtin.import_role:
        name: freeipa
        tasks_from: validate.yml

- name: Validate lustre configuration
  hosts: lustre
  tags:
    - validate
    - lustre
  tasks:
    - ansible.builtin.import_role:
        name: lustre
        tasks_from: validate.yml

- name: Validate vGPU configuration
  hosts: vgpu
  become: true
  gather_facts: true
  tags: vgpu
  tasks:
    - ansible.builtin.include_role:
        name: stackhpc.linux.vgpu
        tasks_from: validate.yml
