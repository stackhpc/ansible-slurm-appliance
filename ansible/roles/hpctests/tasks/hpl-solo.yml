---
# For further information on tuning HPL see e.g.:
# - https://ulhpc-tutorials.readthedocs.io/en/latest/parallel/mpi/HPL/
# - https://community.arm.com/developer/tools-software/hpc/b/hpc-blog/posts/profiling-and-tuning-linpack-step-step-guide
# - http://www.crc.nd.edu/~rich/CRC_Summer_Scholars_2014/HPL-HowTo.pdf

- name: Make directory
  ansible.builtin.file:
    path: "{{ hpctests_rootdir }}/hpl-solo"
    state: directory
    mode: "0755"

- name: Get Slurm node info
  slurm_node_info:
    nodes: "{{ hpctests_computes.stdout_lines }}"
  register: hpctests_nodeinfo

- name: Check nodes are homogenous
  ansible.builtin.assert:
    that: "{{ hpctests_nodeinfo.info[item] | unique | length == 1 }}"
    fail_msg: "Selected nodes are not homogenous: {{ item }} ({{ hpctests_nodeinfo.info['NODELIST'] }}) = {{ hpctests_nodeinfo.info[item] }}"
  loop:
    - SOCKETS
    - CORES
    - THREADS
    - MEMORY

- name: Calculate number of processes (per node)
  # Will run array job, which is SAME on each node, so only need to deal with a single node's processors here
  # Also ignore any hyperthreading TODO: document
  ansible.builtin.set_fact:
    hpctests_hplsolo_ntasks: "{{ (hpctests_nodeinfo.info['SOCKETS'][0]) | int * (hpctests_nodeinfo.info['CORES'][0] | int) }}"

- name: Calculate problem shape
  # Want to go nearly square - again this is per-node remember
  hpl_pq:
    num_processes: "{{ hpctests_hplsolo_ntasks }}"
  register: hpctests_hplsolo_pq

- name: Calculate problem size
  # Based on example shown in http://www.crc.nd.edu/~rich/CRC_Summer_Scholars_2014/HPL-HowTo.pdf but we have MB not GB
  ansible.builtin.set_fact:
    # yamllint disable-line rule:line-length
    hpctests_hplsolo_N: "{{ ((((((hpctests_nodeinfo.info['MEMORY'][0] | int) * (hpctests_hpl_mem_frac | float) * 1024 * 1024 * 1) / 8) | root) / hpctests_hpl_NB)
      | int) * hpctests_hpl_NB }}"
- ansible.builtin.debug:
    # yamllint disable rule:line-length
    msg: "Using {{ hpctests_hplsolo_ntasks }} process per node with P={{ hpctests_hplsolo_pq.grid.P }}, Q={{ hpctests_hplsolo_pq.grid.Q }} targeting {{ (hpctests_hpl_mem_frac
      | float) * 100 }}% of {{ hpctests_nodeinfo.info['MEMORY'][0] }} MB memory per node, block size (NB) = {{ hpctests_hpl_NB }}, problem size (N) = {{ hpctests_hplsolo_N
      }}"
    # yamllint enable rule:line-length

- name: Get all nodes in partition
  ansible.builtin.command: "sinfo --Node --noheader --format %N --partition={{ hpctests_partition }}"
  register: all_nodes
  changed_when: false

- name: Calculate excluded nodes
  ansible.builtin.set_fact:
    hpctests_hplsolo_excluded_nodes: "{{ all_nodes.stdout_lines | difference(hpctests_computes.stdout_lines) }}"

- name: Copy HPL binary
  ansible.builtin.copy:
    src: "{{ hpctests_hpl_srcdir }}/bin/{{ hpctests_hpl_arch }}/xhpl"
    dest: "{{ hpctests_rootdir }}/hpl-solo/xhpl-{{ hpctests_hpl_arch }}"
    mode: "u+x"
    remote_src: true

- name: Template out HPL.dat
  ansible.builtin.template:
    src: "HPL.dat.j2"
    dest: "{{ hpctests_rootdir }}/hpl-solo/HPL.dat"
    mode: "0644"
  vars:
    hpctests_hpl_N: "{{ hpctests_hplsolo_N }}"
    hpctests_hpl_P: "{{ hpctests_hplsolo_pq.grid.P }}"
    hpctests_hpl_Q: "{{ hpctests_hplsolo_pq.grid.Q }}"

- name: Create sbatch script
  ansible.builtin.template:
    src: hpl-solo.sh.j2
    dest: "{{ hpctests_rootdir }}/hpl-solo/hpl-solo.sh"
    mode: "0755"
  vars:
    hpctests_hplsolo_ntasks: 2 # TODO: FIXME

- name: Remove previous outputs # noqa: no-changed-when
  # As depending on the number of nodes there will be different numbers of output files for different partitions so won't all get overwritten
  ansible.builtin.shell:
    cmd: "rm -f {{ hpctests_rootdir }}/hpl-solo/hpl-solo.sh.*.out"

- name: Run hpl-solo # noqa: no-changed-when
  ansible.builtin.command: bash -l -c 'sbatch --wait hpl-solo.sh'
  args:
    chdir: "{{ hpctests_rootdir }}/hpl-solo"
  async: "{{ 20 * 60 }}" # wait for up to 20 minutes
  poll: 15 # check every 15 seconds
  register: hpctests_hplsolo_sbatch

- name: Check HPL completed OK
  tags: postpro
  ansible.builtin.shell: "grep '1 tests completed and passed residual checks' *.out"
  args:
    chdir: "{{ hpctests_rootdir }}/hpl-solo"
  changed_when: false
  register: passed
  failed_when: "passed.stdout_lines | length != hpctests_computes.stdout_lines | length"

- name: Extract performance
  # example of HPL output block - NB code review shows T/V can start with WR or WC:
  #   <snip>
  #   T/V                N    NB     P     Q               Time                 Gflops
  #   --------------------------------------------------------------------------------
  #   WC00C2R2      110592   256     1     1            2545.90            3.54199e+02
  #   HPL_pdgesv() start time Thu Feb 25 19:58:25 2021
  #   <snip>
  tags: postpro
  ansible.builtin.shell: "set -o pipefail && grep '^W[R|C]' *.out | tr -s ' ' | cut -d ' ' -f 7"
  args:
    chdir: "{{ hpctests_rootdir }}/hpl-solo"
  changed_when: false
  register: perf

- name: Summarise results
  tags: postpro
  ansible.builtin.debug:
    # yamllint disable rule:line-length
    msg: |
      # yamllint disable-line rule:line-length
      Summary for hpl-solo on {{ hpctests_computes.stdout_lines | length }} nodes in '{{ hpctests_partition }}' partition, job ID {{ hpctests_hplsolo_sbatch.stdout.split()[-1] }}, device '{{ hpctests_ucx_net_devices }}':

        Max:  {{ perf.stdout_lines | map('float') | max }} gflops
        Min:  {{ perf.stdout_lines | map('float') | min }} gflops
        Mean: {{ (perf.stdout_lines | map('float') | sum) / (hpctests_computes.stdout_lines | length) }} gflops

      Individual node results (gflops):
      {{ dict(hpctests_computes.stdout_lines | zip(perf.stdout_lines | map('float'))) | to_nice_yaml }}
    # yamllint enable rule:line-length
