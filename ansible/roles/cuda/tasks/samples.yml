- name: Ensure cuda_samples_path exists
  file:
    state: directory
    path: "{{ cuda_samples_path }}"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"

- name: Download CUDA samples release
  unarchive:
    remote_src: yes
    src: "{{ cuda_samples_release_url }}"
    dest: "{{ cuda_samples_path }}"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    creates: "{{ cuda_samples_path }}/cuda-samples-{{ cuda_version_short }}"

- name: Create CUDA samples build directory
  file:
    state: directory
    path: "{{ cuda_samples_path }}/cuda-samples-{{ cuda_version_short }}/build"

- name: Build CUDA samples
  shell:
    # We need to source /etc/profile.d/sh.local to add CUDA to the PATH
    cmd: . /etc/profile.d/sh.local && cmake .. && make -j {{ ansible_processor_vcpus }}
    chdir: "{{ cuda_samples_path }}/cuda-samples-{{ cuda_version_short }}/build"
    creates: "{{ cuda_samples_path }}/cuda-samples-{{ cuda_version_short }}/build/Samples/1_Utilities/deviceQuery/deviceQuery"

- name: Run CUDA deviceQuery
  command:
    cmd: "{{ cuda_samples_path }}/cuda-samples-{{ cuda_version_short }}/build/Samples/1_Utilities/deviceQuery/deviceQuery"
  register: _cuda_devicequery

- name: Set fact for CUDA devices
  set_fact:
    cuda_devices: "{{ _cuda_devicequery.stdout | regex_findall('Device (\\d+):') }}"

- name: Run CUDA bandwidth test
  command:
    cmd: "{{ cuda_samples_path }}/cuda-samples-{{ cuda_version_short }}/build/Samples/1_Utilities/bandwidthTest/bandwidthTest --device={{ item }}"
  register: _cuda_bandwidthtest
  loop: "{{ cuda_devices }}"
  loop_control:
    label: "Device {{ item }}" # e.g '0'

- name: Summarise bandwidth test output
  debug:
    msg: |
      {{ _parts[1].splitlines()[0] | trim }}
      Bandwidths: (Gb/s)
      Host to Device: {{ _parts[2].split()[-1] }}
      Device to Host: {{ _parts[3].split()[-1] }}
      Device to Device: {{ _parts[4].split()[-1] }}
      {{ ': '.join(_parts[5].split('=') | map('trim')) }}
      {{ _parts[6] }}
  loop: "{{ _cuda_bandwidthtest.results }}"
  vars:
    _parts: "{{ item.stdout.split('\n\n') }}"
  loop_control:
    label: "Device {{ item.item }}" # e.g '0'
